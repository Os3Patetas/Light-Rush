//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.2
//     from Assets/_Project/Scripts/Player/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace com.icypeak.player
{
    public partial class @PlayerInputActions : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Actions"",
            ""id"": ""9095517e-a686-45ec-a67c-43bb2cc148e6"",
            ""actions"": [
                {
                    ""name"": ""Propulsion"",
                    ""type"": ""Button"",
                    ""id"": ""b356134c-a2ed-4f98-a48c-aaf35e99f83e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Transform"",
                    ""type"": ""Button"",
                    ""id"": ""8e7f03b4-9075-44e8-bc6e-d38e8d2ac463"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""99c5cac8-2d88-4f3b-81d6-d05feeeb6aff"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Cellphone"",
                    ""action"": ""Propulsion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9627e4eb-990f-4f7b-935e-0ffd31d860d9"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Editor"",
                    ""action"": ""Propulsion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1324b149-7a9e-4f2d-81e3-fb494ed3b233"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Editor"",
                    ""action"": ""Transform"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Editor"",
            ""bindingGroup"": ""Editor"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Cellphone"",
            ""bindingGroup"": ""Cellphone"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Actions
            m_Actions = asset.FindActionMap("Actions", throwIfNotFound: true);
            m_Actions_Propulsion = m_Actions.FindAction("Propulsion", throwIfNotFound: true);
            m_Actions_Transform = m_Actions.FindAction("Transform", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Actions
        private readonly InputActionMap m_Actions;
        private IActionsActions m_ActionsActionsCallbackInterface;
        private readonly InputAction m_Actions_Propulsion;
        private readonly InputAction m_Actions_Transform;
        public struct ActionsActions
        {
            private @PlayerInputActions m_Wrapper;
            public ActionsActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Propulsion => m_Wrapper.m_Actions_Propulsion;
            public InputAction @Transform => m_Wrapper.m_Actions_Transform;
            public InputActionMap Get() { return m_Wrapper.m_Actions; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(ActionsActions set) { return set.Get(); }
            public void SetCallbacks(IActionsActions instance)
            {
                if (m_Wrapper.m_ActionsActionsCallbackInterface != null)
                {
                    @Propulsion.started -= m_Wrapper.m_ActionsActionsCallbackInterface.OnPropulsion;
                    @Propulsion.performed -= m_Wrapper.m_ActionsActionsCallbackInterface.OnPropulsion;
                    @Propulsion.canceled -= m_Wrapper.m_ActionsActionsCallbackInterface.OnPropulsion;
                    @Transform.started -= m_Wrapper.m_ActionsActionsCallbackInterface.OnTransform;
                    @Transform.performed -= m_Wrapper.m_ActionsActionsCallbackInterface.OnTransform;
                    @Transform.canceled -= m_Wrapper.m_ActionsActionsCallbackInterface.OnTransform;
                }
                m_Wrapper.m_ActionsActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Propulsion.started += instance.OnPropulsion;
                    @Propulsion.performed += instance.OnPropulsion;
                    @Propulsion.canceled += instance.OnPropulsion;
                    @Transform.started += instance.OnTransform;
                    @Transform.performed += instance.OnTransform;
                    @Transform.canceled += instance.OnTransform;
                }
            }
        }
        public ActionsActions @Actions => new ActionsActions(this);
        private int m_EditorSchemeIndex = -1;
        public InputControlScheme EditorScheme
        {
            get
            {
                if (m_EditorSchemeIndex == -1) m_EditorSchemeIndex = asset.FindControlSchemeIndex("Editor");
                return asset.controlSchemes[m_EditorSchemeIndex];
            }
        }
        private int m_CellphoneSchemeIndex = -1;
        public InputControlScheme CellphoneScheme
        {
            get
            {
                if (m_CellphoneSchemeIndex == -1) m_CellphoneSchemeIndex = asset.FindControlSchemeIndex("Cellphone");
                return asset.controlSchemes[m_CellphoneSchemeIndex];
            }
        }
        public interface IActionsActions
        {
            void OnPropulsion(InputAction.CallbackContext context);
            void OnTransform(InputAction.CallbackContext context);
        }
    }
}
